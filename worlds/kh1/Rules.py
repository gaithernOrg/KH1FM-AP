from BaseClasses import CollectionState, MultiWorld, LocationProgressType
from .Locations import get_locations_by_category

def has_x_worlds(state: CollectionState, player: int, num_of_worlds) -> bool:
    locations = 0
    if has_item(state, player,"Wonderland"):
        locations = locations + 1
    if has_item(state, player,"Olympus Coliseum"):
        locations = locations + 1
    if has_item(state, player,"Deep Jungle"):
        locations = locations + 1
    if has_item(state, player,"Agrabah"):
        locations = locations + 1
    if has_item(state, player,"Monstro"):
        locations = locations + 1
    if has_item(state, player,"Atlantica"):
        locations = locations + 1
    if has_item(state, player,"Halloween Town"):
        locations = locations + 1
    if has_item(state, player,"Neverland"):
        locations = locations + 1
    if has_item(state, player,"Hollow Bastion"):
        locations = locations + 1
   #if has_item(state, player,"100 Acre Wood"):
   #    locations = locations + 1
    if has_item(state, player,"End of the World"):
        locations = locations + 1
    if locations > num_of_worlds:
        return True
    return False

def has_slides(state: CollectionState, player: int) -> bool:
    return state.has("Slide 1", player) #and state.has("Slide 2", player) and state.has("Slide 3", player) and state.has("Slide 4", player) and state.has("Slide 5", player) and state.has("Slide 6", player)

def has_evidence(state: CollectionState, player: int) -> bool:
    return state.has("Footprints", player) #or state.has("Stench", player) or state.has("Claw Marks", player) or state.has("Antenna", player)

def can_glide(state: CollectionState, player: int) -> bool:
    return state.has("Glide", player) or state.has("Super Glide", player)

def has_emblems(state: CollectionState, player: int) -> bool:
    return state.has("Emblem Piece (Flame)", player) and state.has("Emblem Piece (Chest)", player) and state.has("Emblem Piece (Statue)", player) and state.has("Emblem Piece (Fountain)", player)

def has_item(state: CollectionState, player: int, item) -> bool:
    return state.has(item, player)

def has_at_least(state: CollectionState, player: int, item, x) -> bool:
    return state.count(item, player) >= x

def set_rules(multiworld: MultiWorld, player: int, goal: str, atlantica: bool):
    #Location rules.
    #Keys
   #multiworld.get_location("Destiny Islands Chest"                                                        , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Traverse Town 1st District Candle Puzzle Chest"                               , player).access_rule = lambda state: has_item(state, player, "Progressive Blizzard")
   #multiworld.get_location("Traverse Town 1st District Accessory Shop Roof Chest"                         , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town 2nd District Boots and Shoes Awning Chest"                      , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town 2nd District Rooftop Chest"                                     , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town 2nd District Gizmo Shop Facade Chest"                           , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town Alleyway Balcony Chest"                                         , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town Alleyway Blue Room Awning Chest"                                , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town Alleyway Corner Chest"                                          , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town Green Room Clock Puzzle Chest"                                  , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town Green Room Table Chest"                                         , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Traverse Town Red Room Chest"                                                 , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Traverse Town Mystical House Yellow Trinity Chest"                            , player).access_rule = lambda state: has_item(state, player, "Yellow Trinity") and has_item(state, player, "Progressive Fire")
   #multiworld.get_location("Traverse Town Accessory Shop Chest"                                           , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Traverse Town Secret Waterway White Trinity Chest"                            , player).access_rule = lambda state: has_item(state, player, "White Trinity")
    multiworld.get_location("Traverse Town Geppetto's House Chest"                                         , player).access_rule = lambda state: has_item(state, player, "Monstro") and has_item(state, player, "High Jump")
    multiworld.get_location("Traverse Town Item Workshop Right Chest"                                      , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
    multiworld.get_location("Traverse Town 1st District Blue Trinity Balcony Chest"                        , player).access_rule = lambda state: has_item(state, player, "Blue Trinity")
    multiworld.get_location("Traverse Town Mystical House Glide Chest"                                     , player).access_rule = lambda state: can_glide(state, player) and has_item(state, player, "Progressive Fire")
    multiworld.get_location("Traverse Town Alleyway Behind Crates Chest"                                   , player).access_rule = lambda state: has_item(state, player, "Red Trinity")
    multiworld.get_location("Traverse Town Item Workshop Left Chest"                                       , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
   #multiworld.get_location("Traverse Town Secret Waterway Near Stairs Chest"                              , player).access_rule = lambda state: has_item(state, player, "Red Trinity")
    multiworld.get_location("Wonderland Rabbit Hole Green Trinity Chest"                                   , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
   #multiworld.get_location("Wonderland Rabbit Hole Defeat Heartless After Trial Chest"                    , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Wonderland Rabbit Hole Defeat Heartless After Hollow Bastion Chest"           , player).access_rule = lambda state: has_item(state, player, "Hollow Bastion") and has_x_worlds(state, player, 7)
    multiworld.get_location("Wonderland Bizarre Room Green Trinity Chest"                                  , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
    multiworld.get_location("Wonderland Queen's Castle Hedge Left Red Chest"                               , player).access_rule = lambda state: has_evidence(state, player) or has_item(state, player, "High Jump")
    multiworld.get_location("Wonderland Queen's Castle Hedge Right Blue Chest"                             , player).access_rule = lambda state: has_evidence(state, player) or has_item(state, player, "High Jump")
    multiworld.get_location("Wonderland Queen's Castle Hedge Right Red Chest"                              , player).access_rule = lambda state: has_evidence(state, player) or has_item(state, player, "High Jump")
    multiworld.get_location("Wonderland Lotus Forest Thunder Plant Chest"                                  , player).access_rule = lambda state: has_item(state, player, "Progressive Thunder") and has_evidence(state, player)
    multiworld.get_location("Wonderland Lotus Forest Through the Painting Thunder Plant Chest"             , player).access_rule = lambda state: has_item(state, player, "Progressive Thunder") and has_evidence(state, player)
    multiworld.get_location("Wonderland Lotus Forest Glide Chest"                                          , player).access_rule = lambda state: can_glide(state, player)
   #multiworld.get_location("Wonderland Lotus Forest Nut Chest"                                            , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Wonderland Lotus Forest Corner Chest"                                         , player).access_rule = lambda state: has_item(state, player, "High Jump")
    multiworld.get_location("Wonderland Bizarre Room Lamp Chest"                                           , player).access_rule = lambda state: has_evidence(state, player)
    multiworld.get_location("Wonderland Tea Party Garden Above Lotus Forest Entrance 2nd Chest"            , player).access_rule = lambda state: can_glide(state, player)
    multiworld.get_location("Wonderland Tea Party Garden Above Lotus Forest Entrance 1st Chest"            , player).access_rule = lambda state: can_glide(state, player)
    multiworld.get_location("Wonderland Tea Party Garden Bear and Clock Puzzle Chest"                      , player).access_rule = lambda state: has_evidence(state, player)
    multiworld.get_location("Wonderland Tea Party Garden Across From Bizarre Room Entrance Chest"          , player).access_rule = lambda state: can_glide(state, player)
    multiworld.get_location("Wonderland Lotus Forest Through the Painting White Trinity Chest"             , player).access_rule = lambda state: has_item(state, player, "White Trinity") and has_evidence(state, player)
   #multiworld.get_location("Deep Jungle Tree House Beneath Tree House Chest"                              , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Deep Jungle Tree House Rooftop Chest"                                         , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Deep Jungle Hippo's Lagoon Center Chest"                                      , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Deep Jungle Hippo's Lagoon Left Chest"                                        , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Deep Jungle Hippo's Lagoon Right Chest"                                       , player).access_rule = lambda state: has_item(state, player, "High Jump")
   #multiworld.get_location("Deep Jungle Vines Chest"                                                      , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Deep Jungle Vines 2 Chest"                                                    , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Deep Jungle Climbing Trees Blue Trinity Chest"                                , player).access_rule = lambda state: has_item(state, player, "Blue Trinity")
   #multiworld.get_location("Deep Jungle Tunnel Chest"                                                     , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Deep Jungle Cavern of Hearts White Trinity Chest"                             , player).access_rule = lambda state: has_item(state, player, "White Trinity") and has_slides(state, player)
    multiworld.get_location("Deep Jungle Camp Blue Trinity Chest"                                          , player).access_rule = lambda state: has_item(state, player, "Blue Trinity")
   #multiworld.get_location("Deep Jungle Tent Chest"                                                       , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Deep Jungle Waterfall Cavern Low Chest"                                       , player).access_rule = lambda state: has_slides(state, player)
    multiworld.get_location("Deep Jungle Waterfall Cavern Middle Chest"                                    , player).access_rule = lambda state: has_slides(state, player)
    multiworld.get_location("Deep Jungle Waterfall Cavern High Wall Chest"                                 , player).access_rule = lambda state: has_slides(state, player)
    multiworld.get_location("Deep Jungle Waterfall Cavern High Middle Chest"                               , player).access_rule = lambda state: has_slides(state, player)
   #multiworld.get_location("Deep Jungle Cliff Right Cliff Left Chest"                                     , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Deep Jungle Cliff Right Cliff Right Chest"                                    , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Deep Jungle Tree House Suspended Boat Chest"                                  , player).access_rule = lambda state: can_glide(state, player)
   #multiworld.get_location("100 Acre Wood Meadow Inside Log Chest"                                        , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Plaza By Storage Chest"                                               , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Plaza Raised Terrace Chest"                                           , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Plaza Top Corner Chest"                                               , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Alley Chest"                                                          , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Bazaar Across Windows Chest"                                          , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Bazaar High Corner Chest"                                             , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Main Street Right Palace Entrance Chest"                              , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Main Street High Above Alley Entrance Chest"                          , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Agrabah Main Street High Above Palace Gates Entrance Chest"                   , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
   #multiworld.get_location("Agrabah Palace Gates Low Chest"                                               , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Agrabah Palace Gates High Opposite Palace Chest"                              , player).access_rule = lambda state: has_item(state, player, "High Jump")
    multiworld.get_location("Agrabah Palace Gates High Close to Palace Chest"                              , player).access_rule = lambda state: has_item(state, player, "High Jump") and can_glide(state, player)
    multiworld.get_location("Agrabah Storage Green Trinity Chest"                                          , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
   #multiworld.get_location("Agrabah Storage Behind Barrel Chest"                                          , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Entrance Left Chest"                                  , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Agrabah Cave of Wonders Entrance Tall Tower Chest"                            , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
   #multiworld.get_location("Agrabah Cave of Wonders Hall High Left Chest"                                 , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Hall Near Bottomless Hall Chest"                      , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Bottomless Hall Raised Platform Chest"                , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Agrabah Cave of Wonders Bottomless Hall Pillar Chest"                         , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
   #multiworld.get_location("Agrabah Cave of Wonders Bottomless Hall Across Chasm Chest"                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Treasure Room Across Platforms Chest"                 , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Treasure Room Small Treasure Pile Chest"              , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Treasure Room Large Treasure Pile Chest"              , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Treasure Room Above Fire Chest"                       , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Relic Chamber Jump from Stairs Chest"                 , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Relic Chamber Stairs Chest"                           , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Dark Chamber Abu Gem Chest"                           , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Dark Chamber Across from Relic Chamber Entrance Chest", player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Dark Chamber Bridge Chest"                            , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Cave of Wonders Dark Chamber Near Save Chest"                         , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Agrabah Cave of Wonders Silent Chamber Blue Trinity Chest"                    , player).access_rule = lambda state: has_item(state, player, "Blue Trinity")
    multiworld.get_location("Agrabah Cave of Wonders Hidden Room Right Chest"                              , player).access_rule = lambda state: has_item(state, player, "Yellow Trinity") or has_item(state, player, "High Jump")
    multiworld.get_location("Agrabah Cave of Wonders Hidden Room Left Chest"                               , player).access_rule = lambda state: has_item(state, player, "Yellow Trinity") or has_item(state, player, "High Jump")
   #multiworld.get_location("Agrabah Aladdin's House Main Street Entrance Chest"                           , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Agrabah Aladdin's House Plaza Entrance Chest"                                 , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Agrabah Cave of Wonders Entrance White Trinity Chest"                         , player).access_rule = lambda state: has_item(state, player, "White Trinity")
    multiworld.get_location("Monstro Chamber 6 Other Platform Chest"                                       , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
   #multiworld.get_location("Monstro Chamber 6 Platform Near Chamber 5 Entrance Chest"                     , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Monstro Chamber 6 Raised Area Near Chamber 1 Entrance Chest"                  , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
   #multiworld.get_location("Monstro Chamber 6 Low Chest"                                                  , player).access_rule = lambda state: has_item(state, player, "")
    if atlantica or goal == "atlantica":
       #multiworld.get_location("Atlantica Sunken Ship In Flipped Boat Chest"                              , player).access_rule = lambda state: has_item(state, player, "")
       #multiworld.get_location("Atlantica Sunken Ship Seabed Chest"                                       , player).access_rule = lambda state: has_item(state, player, "")
       #multiworld.get_location("Atlantica Sunken Ship Inside Ship Chest"                                  , player).access_rule = lambda state: has_item(state, player, "")
       #multiworld.get_location("Atlantica Ariel's Grotto High Chest"                                      , player).access_rule = lambda state: has_item(state, player, "")
       #multiworld.get_location("Atlantica Ariel's Grotto Middle Chest"                                    , player).access_rule = lambda state: has_item(state, player, "")
       #multiworld.get_location("Atlantica Ariel's Grotto Low Chest"                                       , player).access_rule = lambda state: has_item(state, player, "")
        multiworld.get_location("Atlantica Ursula's Lair Use Fire on Urchin Chest"                         , player).access_rule = lambda state: has_item(state, player, "Progressive Fire") and has_item(state, player, "Mermaid Kick")
       #multiworld.get_location("Atlantica Undersea Gorge Jammed by Ariel's Grotto Chest"                  , player).access_rule = lambda state: has_item(state, player, "")
        multiworld.get_location("Atlantica Triton's Palace White Trinity Chest"                            , player).access_rule = lambda state: has_item(state, player, "White Trinity")
    multiworld.get_location("Halloween Town Moonlight Hill White Trinity Chest"                            , player).access_rule = lambda state: has_item(state, player, "White Trinity")
    multiworld.get_location("Halloween Town Bridge Under Bridge"                                           , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box")
   #multiworld.get_location("Halloween Town Boneyard Tombstone Puzzle Chest"                               , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Halloween Town Bridge Right of Gate Chest"                                    , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and can_glide(state, player)
    multiworld.get_location("Halloween Town Cemetary Behind Grave Chest"                                   , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
    multiworld.get_location("Halloween Town Cemetary By Cat Shape Chest"                                   , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
    multiworld.get_location("Halloween Town Cemetary Between Graves Chest"                                 , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
    multiworld.get_location("Halloween Town Oogie's Manor Lower Iron Cage Chest"                           , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
    multiworld.get_location("Halloween Town Oogie's Manor Upper Iron Cage Chest"                           , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
    multiworld.get_location("Halloween Town Oogie's Manor Hollow Chest"                                    , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
    multiworld.get_location("Halloween Town Oogie's Manor Grounds Red Trinity Chest"                       , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Red Trinity")
    multiworld.get_location("Halloween Town Guillotine Square High Tower Chest"                            , player).access_rule = lambda state: has_item(state, player, "High Jump")
    multiworld.get_location("Halloween Town Guillotine Square Pumpkin Structure Left Chest"                , player).access_rule = lambda state: has_item(state, player, "High Jump") and can_glide(state, player)
    multiworld.get_location("Halloween Town Oogie's Manor Entrance Steps Chest"                            , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box")
    multiworld.get_location("Halloween Town Oogie's Manor Inside Entrance Chest"                           , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box")
    multiworld.get_location("Halloween Town Bridge Left of Gate Chest"                                     , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and (can_glide(state, player) or has_item(state, player, "High Jump"))
    multiworld.get_location("Halloween Town Cemetary By Striped Grave Chest"                               , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
   #multiworld.get_location("Halloween Town Guillotine Square Under Jack's House Stairs Chest"             , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Halloween Town Guillotine Square Pumpkin Structure Right Chest"               , player).access_rule = lambda state: has_item(state, player, "High Jump") and can_glide(state, player)
   #multiworld.get_location("Olympus Coliseum Coliseum Gates Left Behind Columns Chest"                    , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Olympus Coliseum Coliseum Gates Right Blue Trinity Chest"                     , player).access_rule = lambda state: has_item(state, player, "Blue Trinity")
    multiworld.get_location("Olympus Coliseum Coliseum Gates Left Blue Trinity Chest"                      , player).access_rule = lambda state: has_item(state, player, "Blue Trinity")
    multiworld.get_location("Olympus Coliseum Coliseum Gates White Trinity Chest"                          , player).access_rule = lambda state: has_item(state, player, "White Trinity")
    multiworld.get_location("Olympus Coliseum Coliseum Gates Blizzara Chest"                               , player).access_rule = lambda state: has_at_least(state, player, "Progressive Blizzard", 2)
   #multiworld.get_location("Monstro Mouth Boat Deck Chest"                                                , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Monstro Mouth High Platform Boat Side Chest"                                  , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
    multiworld.get_location("Monstro Mouth High Platform Across from Boat Chest"                           , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
    multiworld.get_location("Monstro Mouth Near Ship Chest"                                                , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
    multiworld.get_location("Monstro Mouth Green Trinity Top of Boat Chest"                                , player).access_rule = lambda state: (has_item(state, player, "High Jump") or can_glide(state, player)) and has_item(state, player, "Green Trinity")
   #multiworld.get_location("Monstro Chamber 2 Ground Chest"                                               , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Monstro Chamber 2 Platform Chest"                                             , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Monstro Chamber 5 Platform Chest"                                             , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
   #multiworld.get_location("Monstro Chamber 3 Ground Chest"                                               , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Monstro Chamber 3 Platform Above Chamber 2 Entrance Chest"                    , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Monstro Chamber 3 Near Chamber 6 Entrance Chest"                              , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Monstro Chamber 3 Platform Near Chamber 6 Entrance Chest"                     , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Monstro Mouth High Platform Near Teeth Chest"                                 , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
    multiworld.get_location("Monstro Chamber 5 Atop Barrel Chest"                                          , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player)
   #multiworld.get_location("Monstro Chamber 5 Low 2nd Chest"                                              , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Monstro Chamber 5 Low 1st Chest"                                              , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Neverland Pirate Ship Deck White Trinity Chest"                               , player).access_rule = lambda state: has_item(state, player, "White Trinity") and has_item(state, player, "Green Trinity")
    multiworld.get_location("Neverland Pirate Ship Crows Nest Chest"                                       , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
    multiworld.get_location("Neverland Hold Yellow Trinity Right Blue Chest"                               , player).access_rule = lambda state: has_item(state, player, "Yellow Trinity")
    multiworld.get_location("Neverland Hold Yellow Trinity Left Blue Chest"                                , player).access_rule = lambda state: has_item(state, player, "Yellow Trinity")
   #multiworld.get_location("Neverland Galley Chest"                                                       , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Neverland Cabin Chest"                                                        , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
    multiworld.get_location("Neverland Hold Flight 1st Chest "                                             , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
    multiworld.get_location("Neverland Clock Tower Chest"                                                  , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
    multiworld.get_location("Neverland Hold Flight 2nd Chest"                                              , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
    multiworld.get_location("Neverland Hold Yellow Trinity Green Chest"                                    , player).access_rule = lambda state: has_item(state, player, "Yellow Trinity")
    multiworld.get_location("Neverland Captain's Cabin Chest"                                              , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
   #multiworld.get_location("Hollow Bastion Rising Falls Water's Surface Chest"                            , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Hollow Bastion Rising Falls Under Water 1st Chest"                            , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Hollow Bastion Rising Falls Under Water 2nd Chest"                            , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Rising Falls Floating Platform Near Save Chest"                , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player) or has_item(state, player, "Progressive Blizzard")
    multiworld.get_location("Hollow Bastion Rising Falls Floating Platform Near Bubble Chest"              , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player) or has_item(state, player, "Progressive Blizzard")
    multiworld.get_location("Hollow Bastion Rising Falls High Platform Chest"                              , player).access_rule = lambda state: has_item(state, player, "High Jump") or can_glide(state, player) or (has_item(state, player, "Progressive Blizzard") and has_emblems(state, player))
    multiworld.get_location("Hollow Bastion Castle Gates Gravity Chest"                                    , player).access_rule = lambda state: has_item(state, player, "Progressive Gravity") and has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Castle Gates Freestanding Pillar Chest"                        , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Castle Gates High Pillar Chest"                                , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Great Crest Lower Chest"                                       , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Great Crest After Battle Platform Chest"                       , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Hollow Bastion High Tower 2nd Gravity Chest"                                  , player).access_rule = lambda state: has_item(state, player, "Progressive Gravity") and has_emblems(state, player)
    multiworld.get_location("Hollow Bastion High Tower 1st Gravity Chest"                                  , player).access_rule = lambda state: has_item(state, player, "Progressive Gravity") and has_emblems(state, player)
    multiworld.get_location("Hollow Bastion High Tower Above Sliding Gates Chest"                          , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Library Top of Bookshelf Chest"                                , player).access_rule = lambda state: can_glide(state, player) or has_item(state, player, "Green Trinity")
   #multiworld.get_location("Hollow Bastion Library 1st Floor Turn the Carousel Chest"                     , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Hollow Bastion Library Top of Bookshelf Turn the Carousel Chest"              , player).access_rule = lambda state: can_glide(state, player) or has_item(state, player, "Green Trinity")
   #multiworld.get_location("Hollow Bastion Library 2nd Floor Turn the Carousel 1st Chest"                 , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Hollow Bastion Library 2nd Floor Turn the Carousel 2nd Chest"                 , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Hollow Bastion Lift Stop Library Node After High Tower Switch Gravity Chest"  , player).access_rule = lambda state: has_item(state, player, "Progressive Gravity") and has_item(state, player, "Green Trinity") and has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Lift Stop Library Node Gravity Chest"                          , player).access_rule = lambda state: has_item(state, player, "Progressive Gravity") and has_item(state, player, "Green Trinity")
    multiworld.get_location("Hollow Bastion Lift Stop Under High Tower Sliding Blocks Chest"               , player).access_rule = lambda state: has_emblems(state, player) and can_glide(state, player)
    multiworld.get_location("Hollow Bastion Lift Stop Outside Library Gravity Chest"                       , player).access_rule = lambda state: has_item(state, player, "Progressive Gravity") and has_item(state, player, "Green Trinity")
    multiworld.get_location("Hollow Bastion Lift Stop Heartless Sigil Door Gravity Chest"                  , player).access_rule = lambda state: has_item(state, player, "Progressive Gravity") and has_emblems(state, player)
   #multiworld.get_location("Hollow Bastion Base Level Bubble Under the Wall Platform Chest"               , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Hollow Bastion Base Level Platform Near Entrance Chest"                       , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Hollow Bastion Base Level Near Crystal Switch Chest"                          , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Hollow Bastion Waterway Near Save Chest"                                      , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Hollow Bastion Waterway Blizzard on Bubble Chest"                             , player).access_rule = lambda state: has_item(state, player, "Progressive Blizzard") and has_item(state, player, "High Jump")
   #multiworld.get_location("Hollow Bastion Waterway Unlock Passage from Base Level Chest"                 , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Hollow Bastion Dungeon By Candles Chest"                                      , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("Hollow Bastion Dungeon Corner Chest"                                          , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Hollow Bastion Grand Hall Steps Right Side Chest"                             , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Grand Hall Oblivion Chest"                                     , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Hollow Bastion Grand Hall Left of Gate Chest"                                 , player).access_rule = lambda state: has_emblems(state, player)
   #multiworld.get_location("Hollow Bastion Entrance Hall Push the Statue Chest"                           , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Hollow Bastion Rising Falls White Trinity Chest"                              , player).access_rule = lambda state: has_item(state, player, "White Trinity")
   #multiworld.get_location("End of the World Final Dimension 1st Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 2nd Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 3rd Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 4th Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 5th Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 6th Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 10th Chest"                                  , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 9th Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 8th Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Dimension 7th Chest"                                   , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Giant Crevasse 3rd Chest"                                    , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Giant Crevasse 1st Chest"                                    , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Giant Crevasse 4th Chest"                                    , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Giant Crevasse 2nd Chest"                                    , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Traverse Town Chest"                          , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Wonderland Chest"                             , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Olympus Coliseum Chest"                       , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Deep Jungle Chest"                            , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Agrabah Chest"                                , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Atlantica Chest"                              , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Halloween Town Chest"                         , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Neverland Chest"                              , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus 100 Acre Wood Chest"                          , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World World Terminus Hollow Bastion Chest"                         , player).access_rule = lambda state: has_item(state, player, "")
   #multiworld.get_location("End of the World Final Rest Chest"                                            , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Monstro Chamber 6 White Trinity Chest"                                        , player).access_rule = lambda state: has_item(state, player, "White Trinity")
   #multiworld.get_location("Awakening Chest"                                                              , player).access_rule = lambda state: has_item(state, player, "")
    
   #multiworld.get_location("Chronicles Sora's Story"                                                      , player).access_rule = lambda state: has_item(state, player,"Hollow Bastion") and has_x_worlds(state, player, 7) and has_item(state, player, "High Jump") and has_item(state, player, "Glide") and has_emblems(state, player)
    if goal in ["final_rest", "unknown"]: #Not possible if HB is complete, could interefere with other win cons if 4 emblems is not go-mode
        multiworld.get_location("Chronicles Wonderland"                                                    , player).access_rule = lambda state: has_evidence(state, player)
   #multiworld.get_location("Chronicles Olympus Coliseum"                                                  , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Chronicles Deep Jungle"                                                       , player).access_rule = lambda state: has_slides(state, player)
   #multiworld.get_location("Chronicles Agrabah"                                                           , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Chronicles Monstro"                                                           , player).access_rule = lambda state: has_item(state, player, "High Jump")
   #multiworld.get_location("Chronicles 100 Acre Wood"                                                     , player).access_rule = lambda state: has_item(state, player, "")
    if atlantica or goal == "atlantica":
        multiworld.get_location("Chronicles Atlantica"                                                     , player).access_rule = lambda state: has_item(state, player, "Mermaid Kick")
    multiworld.get_location("Chronicles Halloween Town"                                                    , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
   #multiworld.get_location("Chronicles Neverland"                                                         , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
   #multiworld.get_location("Ansem's Secret Report 1"                                                      , player).access_rule = lambda state: has_item(state, player, "")
    multiworld.get_location("Ansem's Secret Report 2"                                                      , player).access_rule = lambda state: has_emblems(state, player)
    if atlantica or goal == "atlantica":
        multiworld.get_location("Ansem's Secret Report 3"                                                  , player).access_rule = lambda state: has_item(state, player, "Mermaid Kick")
    multiworld.get_location("Ansem's Secret Report 4"                                                      , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Ansem's Secret Report 5"                                                      , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Ansem's Secret Report 6"                                                      , player).access_rule = lambda state: has_emblems(state, player)
    multiworld.get_location("Ansem's Secret Report 7"                                                      , player).access_rule = lambda state: has_item(state, player, "Jack-In-The-Box") and has_item(state, player, "Progressive Fire")
    multiworld.get_location("Ansem's Secret Report 8"                                                      , player).access_rule = lambda state: has_item(state, player, "Hades Cup") and has_x_worlds(state, player, 7)
    multiworld.get_location("Ansem's Secret Report 9"                                                      , player).access_rule = lambda state: has_item(state, player, "Green Trinity")
    multiworld.get_location("Ansem's Secret Report 10"                                                     , player).access_rule = lambda state: has_emblems(state, player)
   #multiworld.get_location("Ansem's Secret Report 11"                                                     , player).access_rule = lambda state: has_item(state, player, "")
    if goal == "sephiroth":
        multiworld.get_location("Ansem's Secret Report 12"                                                 , player).access_rule = lambda state: has_item(state, player, "Phil Cup") and has_item(state, player, "Pegasus Cup") and has_item(state, player, "Hercules Cup")
    if goal == "unknown":
        multiworld.get_location("Ansem's Secret Report 13"                                                 , player).access_rule = lambda state: has_emblems(state, player)
    
    multiworld.get_location("Complete Phil Cup"                                                            , player).access_rule = lambda state: has_item(state, player, "Phil Cup")
    multiworld.get_location("Complete Pegasus Cup"                                                         , player).access_rule = lambda state: has_item(state, player, "Pegasus Cup")
    multiworld.get_location("Complete Hercules Cup"                                                        , player).access_rule = lambda state: has_item(state, player, "Hercules Cup")
    multiworld.get_location("Complete Hades Cup"                                                           , player).access_rule = lambda state: has_item(state, player, "Phil Cup") and has_item(state, player, "Pegasus Cup") and has_item(state, player, "Hercules Cup")
    
    # Region rules.
    multiworld.get_entrance("Wonderland"                                                                   , player).access_rule = lambda state: has_item(state, player,"Wonderland")
    multiworld.get_entrance("Olympus Coliseum"                                                             , player).access_rule = lambda state: has_item(state, player,"Olympus Coliseum")
    multiworld.get_entrance("Deep Jungle"                                                                  , player).access_rule = lambda state: has_item(state, player,"Deep Jungle")
    multiworld.get_entrance("Agrabah"                                                                      , player).access_rule = lambda state: has_item(state, player,"Agrabah")
    multiworld.get_entrance("Monstro"                                                                      , player).access_rule = lambda state: has_item(state, player,"Monstro")
    if atlantica or goal == "atlantica":
        multiworld.get_entrance("Atlantica"                                                                , player).access_rule = lambda state: has_item(state, player,"Atlantica") and has_x_worlds(state, player, 2)
    multiworld.get_entrance("Halloween Town"                                                               , player).access_rule = lambda state: has_item(state, player,"Halloween Town") and has_x_worlds(state, player, 2)
    multiworld.get_entrance("Neverland"                                                                    , player).access_rule = lambda state: has_item(state, player,"Neverland") and has_x_worlds(state, player, 4)
    multiworld.get_entrance("Hollow Bastion"                                                               , player).access_rule = lambda state: has_item(state, player,"Hollow Bastion") and has_x_worlds(state, player, 5)
    multiworld.get_entrance("End of the World"                                                             , player).access_rule = lambda state: has_item(state, player,"Hollow Bastion") and has_x_worlds(state, player, 7) and has_emblems(state, player)
    
    # Win condition.
    multiworld.completion_condition[player] = lambda state: state.has_all({"Victory"}, player)